{
  "name": "djlint",
  "displayName": "djLint",
  "description": "HTML template formatter and linter (Django, Jinja, Nunjucks, Twig, Handlebars, Mustache)",
  "version": "2023.6.0",
  "publisher": "monosans",
  "license": "MIT",
  "homepage": "https://github.com/monosans/djlint-vscode",
  "repository": {
    "type": "git",
    "url": "https://github.com/monosans/djlint-vscode"
  },
  "bugs": {
    "url": "https://github.com/monosans/djlint-vscode/issues"
  },
  "icon": "icon.png",
  "engines": {
    "vscode": "^1.72.0"
  },
  "categories": [
    "Formatters",
    "Linters"
  ],
  "activationEvents": [
    "onLanguage:html",
    "onLanguage:django-html",
    "onLanguage:handlebars",
    "onLanguage:hbs",
    "onLanguage:mustache",
    "onLanguage:jinja",
    "onLanguage:jinja-html",
    "onLanguage:nj",
    "onLanguage:njk",
    "onLanguage:nunjucks",
    "onLanguage:twig"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "configuration": {
      "properties": {
        "djlint.blankLineAfterTag": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Add an additional blank line after {% <tag> ... %} tag groups. Requires djLint ≥ 1.25."
        },
        "djlint.blankLineBeforeTag": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Add an additional blank line before {% <tag> ... %} tag groups. Requires djLint ≥ 1.25."
        },
        "djlint.closeVoidTags": {
          "type": "boolean",
          "default": false,
          "description": "Add closing mark on known void tags. Ex: <img> becomse <img />. Requires djLint ≥ 1.26."
        },
        "djlint.configuration": {
          "type": "string",
          "default": "",
          "description": "Path to global configuration file in .djlintrc format. Requires djLint ≥ 1.13."
        },
        "djlint.customBlocks": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Indent custom template blocks. Requires djLint ≥ 1.25."
        },
        "djlint.customHtml": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Indent custom HTML tags. Requires djLint ≥ 1.25."
        },
        "djlint.enableLinting": {
          "type": "boolean",
          "default": true,
          "description": "Lint for common issues."
        },
        "djlint.exclude": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Override the default exclude paths. Requires djLint ≥ 1.25."
        },
        "djlint.extendExclude": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Add additional paths to the default exclude. Requires djLint ≥ 1.25."
        },
        "djlint.formatAttributeTemplateTags": {
          "type": "boolean",
          "default": false,
          "description": "Attempt to format template syntax inside of tag attributes. Requires djLint ≥ 1.25."
        },
        "djlint.formatCss": {
          "type": "boolean",
          "default": false,
          "description": "Also format contents of <style> tags. Requires djLint ≥ 1.9."
        },
        "djlint.formatJs": {
          "type": "boolean",
          "default": false,
          "description": "Also format contents of <script> tags. Requires djLint ≥ 1.9."
        },
        "djlint.guessProfile": {
          "type": "boolean",
          "default": true,
          "description": "Automatically set djLint's profile setting according to language ID. Disable to get it from the djLint config file."
        },
        "djlint.ignore": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Codes to ignore."
        },
        "djlint.ignoreBlocks": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Template blocks to not indent. Requires djLint ≥ 1.24."
        },
        "djlint.ignoreCase": {
          "type": "boolean",
          "default": false,
          "description": "Do not fix case on known html tags. Requires djLint ≥ 1.23."
        },
        "djlint.include": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Codes to include. Requires djLint ≥ 1.20."
        },
        "djlint.indentCss": {
          "type": [
            "integer",
            null
          ],
          "default": null,
          "description": "CSS indent level. Requires djLint ≥ 1.25."
        },
        "djlint.indentJs": {
          "type": [
            "integer",
            null
          ],
          "default": null,
          "description": "JS indent level. Requires djLint ≥ 1.25."
        },
        "djlint.lineBreakAfterMultilineTag": {
          "type": "boolean",
          "default": false,
          "description": "Do not condense the content of multi-line tags into the line of the last attribute. Requires djLint ≥ 1.27."
        },
        "djlint.maxLineLength": {
          "type": [
            "integer",
            null
          ],
          "default": null,
          "description": "Max line length. Requires djLint ≥ 1.25."
        },
        "djlint.maxAttributeLength": {
          "type": [
            "integer",
            null
          ],
          "default": null,
          "description": "Max attribute length. Requires djLint ≥ 1.25."
        },
        "djlint.noFunctionFormatting": {
          "type": "boolean",
          "default": false,
          "description": "Do not attempt to format function contents. Requires djLint ≥ 1.30.2."
        },
        "djlint.noLineAfterYaml": {
          "type": "boolean",
          "default": false,
          "description": "Do not add a blank line after yaml front matter. Requires djLint ≥ 1.29."
        },
        "djlint.noSetFormatting": {
          "type": "boolean",
          "default": false,
          "description": "Do not attempt to format set contents. Requires djLint ≥ 1.30.2."
        },
        "djlint.preserveBlankLines": {
          "type": "boolean",
          "default": false,
          "description": "Preserve blank lines. Requires djLint ≥ 1.3."
        },
        "djlint.preserveLeadingSpace": {
          "type": "boolean",
          "default": false,
          "description": "Preserve leading space. Requires djLint ≥ 1.2."
        },
        "djlint.pythonPath": {
          "type": "string",
          "default": "python",
          "description": "Path to the desired Python interpreter. Only used if djlint.useVenv is disabled or the Python extension is not installed."
        },
        "djlint.requirePragma": {
          "type": "boolean",
          "default": false,
          "description": "Only format or lint files that start with a comment with the text 'djlint:on'."
        },
        "djlint.useEditorIndentation": {
          "type": "boolean",
          "default": true,
          "description": "Get the number of indent spaces from VS Code (see the editor.tabSize setting). Disable to get it from the djLint config file."
        },
        "djlint.useGitignore": {
          "type": "boolean",
          "default": false,
          "description": "Use .gitignore file to extend excludes."
        },
        "djlint.useVenv": {
          "type": "boolean",
          "default": true,
          "description": "Use the Python executable from the current active environment. The Python extension must be installed, if it is not installed, the djlint.pythonPath setting will be used."
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run esbuild-base -- --minify",
    "esbuild-base": "esbuild ./src/extension.ts --bundle --outfile=out/extension.js --external:vscode --format=cjs --platform=node",
    "build": "npm run esbuild-base -- --sourcemap",
    "watch": "npm run esbuild-base -- --sourcemap --watch",
    "lint": "eslint . && tsc --noEmit",
    "format": "prettier --write ."
  },
  "devDependencies": {
    "@types/node": "16.18.35",
    "@types/vscode": "1.72.0",
    "@typescript-eslint/eslint-plugin": "5.59.9",
    "@typescript-eslint/parser": "5.59.9",
    "@vscode/vsce": "2.19.0",
    "esbuild": "0.18.1",
    "eslint": "8.42.0",
    "eslint-config-prettier": "8.8.0",
    "ovsx": "0.8.1",
    "prettier": "2.8.8",
    "typescript": "5.1.3"
  },
  "eslintConfig": {
    "ignorePatterns": [
      "out/"
    ],
    "extends": [
      "plugin:@typescript-eslint/all",
      "prettier"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
      "ecmaVersion": 6,
      "sourceType": "module",
      "project": "./tsconfig.json"
    },
    "plugins": [
      "@typescript-eslint"
    ],
    "root": true,
    "rules": {
      "@typescript-eslint/ban-ts-comment": "off",
      "@typescript-eslint/explicit-member-accessibility": [
        "error",
        {
          "accessibility": "no-public"
        }
      ],
      "@typescript-eslint/init-declarations": "off",
      "@typescript-eslint/lines-between-class-members": "off",
      "@typescript-eslint/no-confusing-void-expression": [
        "error",
        {
          "ignoreArrowShorthand": true
        }
      ],
      "@typescript-eslint/no-magic-numbers": "off",
      "@typescript-eslint/prefer-readonly-parameter-types": "off",
      "@typescript-eslint/strict-boolean-expressions": [
        "error",
        {
          "allowNullableBoolean": true,
          "allowNullableString": true,
          "allowNullableNumber": true
        }
      ],
      "curly": "error",
      "eqeqeq": [
        "error",
        "always",
        {
          "null": "ignore"
        }
      ],
      "one-var": [
        "error",
        "never"
      ]
    }
  }
}
